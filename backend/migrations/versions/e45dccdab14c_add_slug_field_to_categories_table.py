"""add slug field to categories table

Revision ID: e45dccdab14c
Revises: 1b03f8758720
Create Date: 2025-10-30 00:42:21.069023

"""
from alembic import op
import sqlalchemy as sa
from slugify import slugify


# revision identifiers, used by Alembic.
revision = 'e45dccdab14c'
down_revision = '1b03f8758720'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Paso 1: Añadir columna slug como nullable
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column('slug', sa.String(length=100), nullable=True))

    # Paso 2: Generar slugs para categorías existentes
    connection = op.get_bind()
    categories = connection.execute(
        sa.text("SELECT id, name FROM categories")).fetchall()

    used_slugs = set()
    for category_id, name in categories:
        base_slug = slugify(name)
        slug = base_slug
        counter = 1

        # Gestionar colisiones
        while slug in used_slugs:
            slug = f"{base_slug}-{counter}"
            counter += 1

        used_slugs.add(slug)
        connection.execute(
            sa.text("UPDATE categories SET slug = :slug WHERE id = :id"),
            {"slug": slug, "id": category_id}
        )

    # Paso 3: Hacer la columna NOT NULL y añadir índice único
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.alter_column('slug', nullable=False)
        batch_op.create_index(batch_op.f('ix_categories_slug'), [
                              'slug'], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_categories_slug'))
        batch_op.drop_column('slug')

    # ### end Alembic commands ###
